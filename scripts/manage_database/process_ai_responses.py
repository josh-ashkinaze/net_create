"""
Author: Joshua Ashkinaze
Date: 2023-05-07

Description: This script processes the ideas generated by GPT and returns a CSV file to be used with the experiment.
"""

import os
import glob
import re
import pandas as pd
import logging
import argparse
from datetime import datetime


def find_latest_file(directory, pattern):
    search_pattern = os.path.join(directory, f'*{pattern}*')
    matching_files = glob.glob(search_pattern)

    sorted_files = sorted(matching_files, key=os.path.getctime)
    latest_file = sorted_files[-1]
    return latest_file


def extract_ideas(text):
    text = text.lower()
    ideas = []

    lines = text.split("\n")
    for line in lines:
        line = line.strip()

        if re.match(r'\d+\.', line):
            idea = re.sub(r'\d+\.', '', line).strip()
            ideas.append(idea)

        elif re.match(r'-', line):
            idea = re.sub(r'-', '', line).strip()
            ideas.append(idea)

        else:
            ideas.append(line)

    ideas = list(set([idea for idea in ideas if idea]))

    return ideas


def process_ideas(x):
    x = x.replace('"', '')
    return x


def main(n_per_item, experiment_title, prompt_condition):
    LOG_FORMAT = '%(asctime)s %(levelname)s: %(message)s'
    logging.basicConfig(filename=f'{os.path.basename(__file__)}.log', level=logging.INFO,
                        format=LOG_FORMAT, datefmt='%Y-%m-%d %H:%M:%S', filemode='w')
    logging.info(f"Processing ideas for {experiment_title} experiment with prompt condition {prompt_condition}. Returning {n_per_item} ideas per item.")
    prompt_expr = pd.read_json(find_latest_file("../../data/prompt_experiments", experiment_title), lines=True)
    prompt_expr['prompt_condition'] = prompt_expr["prompt_condition"].replace("zero_shot_limit_length", "zero_limit")
    prompt_expr = prompt_expr.query(f"prompt_condition=='{prompt_condition}'")
    prompt_expr['ideas'] = prompt_expr['output_responses'].apply(lambda x: extract_ideas(x))
    prompt_exploded = prompt_expr.explode('ideas')
    prompt_exploded['response'] = prompt_exploded['ideas'].apply(lambda x: process_ideas(x))
    prompt_exploded_sample = prompt_exploded.groupby(by=['aut_item']).sample(n_per_item)
    prompt_exploded_sample['response_id'] = [f'ai_{str(i)}' for i in range(len(prompt_exploded_sample))]
    prompt_exploded_sample.to_csv("../../data/ai_responses.csv", index=False)
    logging.info("Finished processing ideas.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process ideas generated by GPT.')
    parser.add_argument('--n_per_item', type=int, default=50, help='Number of ideas per item to process')
    parser.add_argument('--experiment_title', type=str, default='length', help='Title of the experiment')
    parser.add_argument('--prompt_condition', type=str, default='zero_limit', help='Condition for the prompt')
    args = parser.parse_args()

    main(args.n_per_item, args.experiment_title, args.prompt_condition)
